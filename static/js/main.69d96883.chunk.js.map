{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","username","className","alt","src","CardList","Robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onsearchchange","event","setState","target","value","state","fetch","then","respone","json","users","this","filteredRobots","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6NAYeA,EAXF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,GAAkB,EAAdC,SAC/B,OACD,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACpB,6BACE,4BAAKF,GACL,2BAAIC,MCcOM,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,aCERY,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACD,yBAAKX,UAAY,OACjB,2BACKA,UAAU,kCACRY,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCCFI,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,YCoCMC,E,YAlCd,aACC,IAAD,8BACA,+CAaGC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb9C,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJf,E,iFAOoB,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAGA,EAAQC,UACvBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAStC,IAAD,EAAgCC,KAAKN,MAA5BxB,EAAT,EAASA,OAAQM,EAAjB,EAAiBA,YACVyB,EAAiB/B,EAAOgC,QAAO,SAAAhC,GAClC,OAAOA,EAAOR,KAAKyC,cAAcC,SAAS5B,EAAY2B,kBAEzD,OACG,yBAAKrC,UAAY,MACjB,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWW,aAAgBuB,KAAKX,iBAC7B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAS+B,U,GA9BXI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.69d96883.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = ({name, email, id, username}) => {\r\n\treturn(\r\n<div className='tc bg-light-green dib br3 ma3 grow bw2 shadow-1'>\r\n <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n  <div>\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n  </div> \r\n</div>\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({Robots}) => {\r\n\treturn (\r\n\t\t\t<div>\r\n{ \r\n\t    Robots.map((user, i) => {\r\n   \t\treturn (\r\n   \t\t\t<Card \r\n   \t\t\tkey={i} \r\n   \t\t\tid={Robots[i].id} \r\n   \t\t\tname={Robots[i].name} \r\n   \t\t\temail={Robots[i].email}\r\n   \t\t\t/>);\t\r\n\t})\r\n}\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n<div className = 'pa2'>\r\n<input \r\n \t   className='pa3 ba bg-lightest-blue b--blue'\r\n       type='search' \r\n       placeholder='Search Friends'\r\n       onChange={searchChange}\r\n       />\r\n</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n\tconstructor() \r\n\t{\r\n\tsuper()\t\r\n\tthis.state = {\r\n\t\t\tRobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t\t}\r\n\t\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(respone=> respone.json())\r\n\t\t.then(users => this.setState({Robots: users})\r\n\t\t);\r\n\t}\r\n\r\n    onsearchchange = (event) => {\r\n    \tthis.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n\trender()\r\n\t{\tconst {Robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = Robots.filter(Robots =>{\r\n    \treturn Robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    \t})\r\n\t\treturn (\r\n\t\t   <div className = 'tc'>\r\n\t\t   <h1 className='f1'>Friends</h1>\r\n\t\t   <Searchbox searchChange = {this.onsearchchange}/>\r\n\t       <Scroll>\r\n\t         <CardList Robots= {filteredRobots} />\r\n\t\t   </Scroll>\r\n\t\t   </div>\r\n\t\t\t);}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}